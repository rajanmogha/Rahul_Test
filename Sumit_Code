import java.util.*;

public class Solution {
    public int solution(int[] T) {
        int n = T.length;
        List<Integer>[] graph = new ArrayList[n];
        for (int i = 0; i < n; i++) graph[i] = new ArrayList<>();

        // Build the graph
        for (int i = 1; i < n; i++) {
            graph[i].add(T[i]);
            graph[T[i]].add(i);
        }

        return dfs(0, -1, graph, false);
    }

    private int dfs(int node, int parent, List<Integer>[] graph, boolean usedTicket) {
        int maxCities = 1;  // Include current city

        for (int neighbor : graph[node]) {
            if (neighbor == parent) continue;

            boolean isOdd = (neighbor % 2 == 1);
            if (isOdd && usedTicket) continue;  // Already used ticket

            maxCities = Math.max(maxCities, 1 + dfs(neighbor, node, graph, usedTicket || isOdd));
        }

        return maxCities;
    }

    public static void main(String[] args) {
        Solution sol = new Solution();
        int[] T1 = {0, 9, 0, 2, 6, 8, 0, 8, 3, 0};
        int[] T2 = {0, 0, 0, 1, 6, 1, 0, 0};
        System.out.println(sol.solution(T1)); // Output: 4
        System.out.println(sol.solution(T2)); // Output: 3
    }
}

